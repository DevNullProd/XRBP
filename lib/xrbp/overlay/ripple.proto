syntax = "proto3";
package protocol;

enum MessageType
{
    MTZero                  = 0;
    MTHELLO                 = 1;
    MTMANIFESTS             = 2;
    MTPING                  = 3;
    MTPROOFOFWORK           = 4;
    MTCLUSTER               = 5;
    MTGET_PEERS             = 12;
    MTPEERS                 = 13;
    MTENDPOINTS             = 15;
    MTTRANSACTION           = 30;
    MTGET_LEDGER            = 31;
    MTLEDGER_DATA           = 32;
    MTPROPOSE_LEDGER        = 33;
    MTSTATUS_CHANGE         = 34;
    MTHAVE_SET              = 35;
    MTVALIDATION            = 41;
    MTGET_OBJECTS           = 42;
    MTGET_SHARD_INFO        = 50;
    MTSHARD_INFO            = 51;

    // <available>          = 10;
    // <available>          = 11;
    // <available>          = 14;
    // <available>          = 20;
    // <available>          = 21;
    // <available>          = 22;
    // <available>          = 40;
}

// token, iterations, target, challenge = issue demand for proof of work
// token, response = give solution to proof of work
// token, result = report result of pow

//------------------------------------------------------------------------------

/* Provides the current ephemeral key for a validator. */
message TMManifest
{
    // A Manifest object in the Ripple serialization format.
    bytes stobject = 1;
}

message TMManifests
{
    repeated TMManifest list = 1;

    // The manifests sent when a peer first connects to another peer are `history`.
    bool history = 2 [deprecated=true];
}

//------------------------------------------------------------------------------

/*  Requests or responds to a proof of work.
    Unimplemented and unused currently.
*/
message TMProofWork
{
    string token       = 1;
    uint32 iterations  = 2;
    bytes target       = 3;
    bytes challenge    = 4;
    bytes response     = 5;

    enum PowResult
    {
        POWROK          = 0;
        POWRREUSED      = 1;
        POWREXPIRED     = 2;    // You took too long solving
        POWRTOOEASY     = 3;    // Difficulty went way up, sorry
        POWRINVALID     = 4;
        POWRDISCONNECT  = 5;    // We are disconnecting
    }
    PowResult result   = 6;
}

//------------------------------------------------------------------------------

// Sent on connect
message TMHello
{
    // VFALCO NOTE The major and minor parts of the version number are
    //             encoded in the high and low order 16 bits of the uint32.
    //
    uint32         protoVersion    = 1;
    uint32         protoVersionMin = 2;
    bytes          nodePublic      = 3;
    bytes          nodeProof       = 4;
    string         fullVersion     = 5;
    uint64         netTime         = 6;
    uint32         ipv4Port        = 7;  // NOT USED
    uint32         ledgerIndex     = 8;
    bytes          ledgerClosed    = 9;  // our last closed ledger
    bytes          ledgerPrevious  = 10; // the ledger before the last closed ledger
    bool           nodePrivate     = 11; // Request to not forward IP.
    TMProofWork    proofOfWork     = 12; // request/provide proof of work
    bool           testNet         = 13; // Running as testnet.
    uint32         local_ip        = 14; // NOT USED -- our public IP
    uint32         remote_ip       = 15; // NOT USED -- IP we see connection from
    string         local_ip_str    = 16; // our public IP
    string         remote_ip_str   = 17; // IP we see connection from
}

// The status of a node in our cluster
message TMClusterNode
{
    string          publicKey       = 1;
    uint32          reportTime      = 2;
    uint32          nodeLoad        = 3;
    string          nodeName        = 4;
    string          address         = 5;
}

// Sources that are placing load on the server
message TMLoadSource
{
    string          name            = 1;
    uint32          cost            = 2;
    uint32          count           = 3; // number of connections
}

// The status of all nodes in the cluster
message TMCluster
{
    repeated TMClusterNode   clusterNodes    = 1;
    repeated TMLoadSource    loadSources     = 2;
}

// Request info on shards held
message TMGetShardInfo
{
    uint32 hops            = 1; // number of hops to travel
    bool lastLink          = 2; // true if last link in the peer chain
    repeated uint32 peerchain       = 3;
}

// Info about shards held
message TMShardInfo
{
    string shardIndexes    = 1; // rangeSet of shard indexes
    bytes nodePubKey       = 2; // The node's public key
    string endpoint        = 3; // ipv6 or ipv4 address
    bool lastLink          = 4; // true if last link in the peer chain
    repeated uint32 peerchain       = 5; // List of IDs used to route messages
}

// A transaction can have only one input and one output.
// If you want to send an amount that is greater than any single address of yours
// you must first combine coins from one address to another.

enum TransactionStatus
{
    TSZERO              = 0;
    TSNEW               = 1;    // origin node did/could not validate
    TSCURRENT           = 2;    // scheduled to go in this ledger
    TSCOMMITED          = 3;    // in a closed ledger
    TSREJECT_CONFLICT   = 4;
    TSREJECT_INVALID    = 5;
    TSREJECT_FUNDS      = 6;
    TSHELD_SEQ          = 7;
    TSHELD_LEDGER       = 8;    // held for future ledger
}

message TMTransaction
{
    bytes rawTransaction           = 1;
    TransactionStatus status       = 2;
    uint64 receiveTimestamp        = 3;
    bool deferred                  = 4;    // not applied to open ledger
}


enum NodeStatus
{
    NSZERO          = 0;
    NSCONNECTING    = 1;        // acquiring connections
    NSCONNECTED     = 2;        // convinced we are connected to the real network
    NSMONITORING    = 3;        // we know what the previous ledger is
    NSVALIDATING    = 4;        // we have the full ledger contents
    NSSHUTTING      = 5;        // node is shutting down
}

enum NodeEvent
{
    NEZERO              = 0;
    NECLOSING_LEDGER    = 1;    // closing a ledger because its close time has come
    NEACCEPTED_LEDGER   = 2;    // accepting a closed ledger, we have finished computing it
    NESWITCHED_LEDGER   = 3;    // changing due to network consensus
    NELOST_SYNC         = 4;
}

message TMStatusChange
{
    NodeStatus newStatus       = 1;
    NodeEvent newEvent         = 2;
    uint32 ledgerSeq           = 3;
    bytes ledgerHash           = 4;
    bytes ledgerHashPrevious   = 5;
    uint64 networkTime         = 6;
    uint32 firstSeq            = 7;
    uint32 lastSeq             = 8;
}


// Announce to the network our position on a closing ledger
message TMProposeSet
{
    uint32 proposeSeq          = 1;
    bytes currentTxHash        = 2;    // the hash of the ledger we are proposing
    bytes nodePubKey           = 3;
    uint32 closeTime           = 4;
    bytes signature            = 5;    // signature of above fields
    bytes previousledger       = 6;
    bool checkedSignature      = 7;    // node vouches signature is correct
    repeated bytes addedTransactions    = 10;   // not required if number is large
    repeated bytes removedTransactions  = 11;   // not required if number is large
    uint32 hops                = 12;   // Number of hops traveled
}

enum TxSetStatus
{
    TSsZERO     = 0;
    TSHAVE      = 1;    // We have this set locally
    TSCAN_GET   = 2;    // We have a peer with this set
    TSNEED      = 3;    // We need this set and can't get it
}

message TMHaveTransactionSet
{
    TxSetStatus status     = 1;
    bytes hash             = 2;
}


// Used to sign a final closed ledger after reprocessing
message TMValidation
{
    bytes validation       = 1;    // in STValidation signed form
    bool checkedSignature  = 2;    // node vouches signature is correct
    uint32 hops            = 3;    // Number of hops traveled
}

message TMGetPeers
{
    uint32 doWeNeedThis    = 1;  // yes since you are asserting that the packet size isn't 0 in Message
}

message TMIPv4Endpoint
{
    uint32 ipv4            = 1;

    // VFALCO NOTE There is no uint16 in google protocol buffers,
    //             so we use a uint32 to represent the port.
    //
    uint32 ipv4Port        = 2;
}

// this message is obsolete/no longer procesed
message TMPeers
{
    repeated TMIPv4Endpoint nodes   = 1;
}

// An Endpoint describes a network peer that can accept incoming connections
message TMEndpoint
{
    TMIPv4Endpoint ipv4    = 1;
    uint32         hops    = 2;
}

// An array of Endpoint messages
message TMEndpoints
{
    // This field is used to allow the TMEndpoints message format to be
    // modified as necessary in the future.
    uint32         version = 1;

    repeated TMEndpoint     endpoints = 2;

    // An update to the Endpoint type that uses a string
    // to represent endpoints, thus allowing ipv6 or ipv4 addresses
    message TMEndpointv2
    {
        string endpoint = 1;
        uint32 hops     = 2;
    }
    repeated TMEndpointv2   endpoints_v2 = 3;
};

message TMIndexedObject
{
    bytes hash         = 1;
    bytes nodeID       = 2;
    bytes index        = 3;
    bytes data         = 4;
    uint32 ledgerSeq   = 5;
}

message TMGetObjectByHash
{
    enum ObjectType {
        OTUNKNOWN           = 0;
        OTLEDGER            = 1;
        OTTRANSACTION       = 2;
        OTTRANSACTION_NODE  = 3;
        OTSTATE_NODE        = 4;
        OTCAS_OBJECT        = 5;
        OTFETCH_PACK        = 6;
    }

    ObjectType type            = 1;
    bool query                 = 2;    // is this a query or a reply?
    uint32 seq                 = 3;    // used to match replies to queries
    bytes ledgerHash           = 4;    // the hash of the ledger these queries are for
    bool fat                   = 5;    // return related nodes
    repeated TMIndexedObject objects    = 6;    // the specific objects requested
}


message TMLedgerNode
{
    bytes nodedata         = 1;
    bytes nodeid           = 2;    // missing for ledger base data
}

enum TMLedgerInfoType
{
    LIBASE          = 0;        // basic ledger info
    LITX_NODE       = 1;        // transaction node
    LIAS_NODE       = 2;        // account state node
    LITS_CANDIDATE  = 3;        // candidate transaction set
}

enum TMLedgerType
{
    LTACCEPTED      = 0;
    LTCURRENT       = 1;        // no longer supported
    LTCLOSED        = 2;
}

enum TMQueryType
{
    QTINDIRECT      = 0;
}

message TMGetLedger
{
    TMLedgerInfoType itype = 1;
    TMLedgerType ltype     = 2;
    bytes ledgerHash       = 3;    // Can also be the transaction set hash if liTS_CANDIDATE
    uint32 ledgerSeq       = 4;
    repeated bytes nodeIDs          = 5;
    uint64 requestCookie   = 6;
    TMQueryType queryType  = 7;
    uint32 queryDepth      = 8;    // How deep to go, number of extra levels
}

enum TMReplyError
{
    REZERO                          = 0;
    RENO_LEDGER                     = 1;    // We don't have the ledger you are asking about
    RENO_NODE                       = 2;    // We don't have any of the nodes you are asking for
}

message TMLedgerData
{
    bytes ledgerHash       = 1;
    uint32 ledgerSeq       = 2;
    TMLedgerInfoType type  = 3;
    repeated TMLedgerNode nodes     = 4;
    uint32 requestCookie   = 5;
    TMReplyError error     = 6;
}

message TMPing
{
    enum pingType {
        PTPING = 0; // we want a reply
        PTPONG = 1; // this is a reply
    }
    pingType type      = 1;
    uint32 seq         = 2; // detect stale replies, ensure other side is reading
    uint64 pingTime    = 3; // know when we think we sent the ping
    uint64 netTime     = 4;
}

